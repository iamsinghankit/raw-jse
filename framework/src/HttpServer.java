import rawhttp.core.RawHttp;
import rawhttp.core.body.StringBody;
import rawhttp.core.server.TcpRawHttpServer;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;

/**
 * This class is the example source used to generate a HTTP server from the annotations
 * declared in the annotations module.
 * <p>
 * The real runtime class will be generated by the HttpAnnotationProcessor.
 */
public class HttpServer implements Runnable, AutoCloseable {
    private final RawHttp http = new RawHttp();
    private final TcpRawHttpServer server;

    public HttpServer( int port ) {
        this.server = new TcpRawHttpServer( port );
    }

    @Override
    public void run() {
        var getHandlers = new HashMap<String, Supplier<String>>();
        var postHandlers = new HashMap<String, Function<String, String>>();
        var poster = new Poster();

        postHandlers.put( "foo", poster::foo );

        server.start( ( req ) -> {
            String body = null;
            var path = req.getUri().getPath();
            if ( req.getMethod().equals( "GET" ) ) {
                var h = getHandlers.get( path );
                if ( h != null ) {
                    body = h.get();
                }
            } else if ( req.getMethod().equals( "POST" ) ) {
                var h = postHandlers.get( path );
                if ( h != null ) {
                    var reqBody = req.getBody().map(
                            b -> {
                                try {
                                    return b.decodeBodyToString( StandardCharsets.UTF_8 );
                                } catch ( IOException e ) {
                                    throw new RuntimeException( e );
                                }
                            } ).orElse( "" );
                    body = h.apply( reqBody );
                }
            }
            if ( body == null ) {
                return Optional.empty();
            }
            return Optional.of( http.parseResponse( "200 OK" )
                    .withBody( new StringBody( body, "text/plain" ) ) );
        } );
    }

    @Override
    public void close() {
        server.stop();
    }

}

class Poster {
    public String foo( String s ) {
        return s;
    }
}